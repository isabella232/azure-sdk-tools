parameters:
  ServiceDirectory: not-set
  ArmTemplateParameters: '$subscriptionConfiguration.ArmTemplateParameters'
  DeleteAfterHours: 24
  Location: ''
  SubscriptionConfiguration: $(sub-config-azure-cloud-test-resources)
  Platform: ''

# SubscriptionConfiguration will be splat into the parameters of the test
# resources script. It should be JSON in the form:
# {
#   "SubscriptionId": "<subscription id>",
#   "TenantId": "<tenant id>",
#   "TestApplicationId": "<test app id>",
#   "TestApplicationSecret": "<test app secret>",
#   "ProvisionerApplicationId": "<provisioner app id>",
#   "ProvisionerApplicationSecret": "<provisioner app secret>",
#   "Environment": "AzureCloud | AzureGov | AzureChina | <other environment>"
#   "EnvironmentVariables": {
#       "SERVICE_MANAGEMENT_URL": "<service management url>",
#       "STORAGE_ENDPOINT_SUFFIX": "<storage endpoint suffix>",
#       "RESOURCE_MANAGER_URL": "<resource manager url>",
#       "SEARCH_ENDPOINT_SUFFIX": "<search endpoint suffix>",
#       "COSMOS_TABLES_ENDPOINT_SUFFIX": "<cosmos tables endpoint suffix>"
#   },
#   "ArmTemplateParameters": {
#       "keyVaultDomainSuffix": "<keyVaultDomainSuffix>",
#       "storageEndpointSuffix": "<storageEndpointSuffix>",
#       "endpointSuffix": "<endpointSuffix>",
#       "azureAuthorityHost": "<azureAuthorityHost>",
#       "keyVaultEndpointSuffix": "<keyVaultEndpointSuffix>"
#   }
# }


steps:
  - template: /eng/common/TestResources/setup-az-modules.yml

  - pwsh: |
      eng/common/TestResources/Import-AzModules.ps1

      $subscriptionConfiguration = @'
        ${{ parameters.SubscriptionConfiguration }}
      '@ | ConvertFrom-Json -AsHashtable;

      if (!$subscriptionConfiguration.ArmTemplateParameters) {
        $subscriptionConfiguration.ArmTemplateParameters = @{}
      }

      $armTemplateParameters = @'
        ${{ parameters.ArmTemplateParameters }}
      '@ | ConvertFrom-Json -AsHashtable;

      # 1. Support legacy ArmTemplateParameters passed in directly as a hashmap:
      #      @{ 'param1' = 'foo' ; 'param2' = 'bar' }
      # 2. Support additional sdk pipeline and/or platform specific arm template parameters:
      #      @{
      #        'param1' = ${ value = 'foo' ; platform = 'bar' } ;
      #        'param2' = ${ value = 'baz' } ;
      #       )
      # 3. For duplicate keys, prefer the template/script parameter over the keyvault subscriptionConfiguration.
      if ($armTemplateParameters) {
        foreach $($p in $(ArmTemplateParameters).GetEnumerator()) {
          if (!$p.Value.platform -or $p.Value.Platform -eq '${{ parameters.Platform }}') {
            $subscriptionConfiguration.ArmTemplateParameters[$p.name] = $p.Value
          }
        }
      }

      eng/common/TestResources/New-TestResources.ps1 `
        -BaseName 'Generated' `
        -ServiceDirectory ${{ parameters.ServiceDirectory }} `
        -Location '${{ parameters.Location }}' `
        -DeleteAfterHours ${{ parameters.DeleteAfterHours }} `
        @subscriptionConfiguration
        -CI `
        -Force `
        -Verbose | Out-Null
    displayName: Deploy test resources
